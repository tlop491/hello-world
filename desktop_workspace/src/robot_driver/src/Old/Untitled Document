
#include "ros/ros.h"
#include "geometry_msgs/Twist.h"
#include "sensor_msgs/LaserScan.h"
//Odometry required header files
#include "nav_msgs/Odometry.h"
#include <fstream>
#include "persistence1d.hpp"
geometry_msgs::Twist velocityCommand; 



using namespace std;
using namespace p1d;

//Store range values for min/max computation
float locationValues[512];
vector<float> locationData; 



/*
The scan subscriber call back function
To understand the sensor_msgs::LaserScan object look at
http://docs.ros.org/api/sensor_msgs/html/msg/LaserScan.html
*/
void laserScanCallback(const sensor_msgs::LaserScan::ConstPtr& laserScanData)
{
std::ofstream myfile;
myfile.open ("location.txt");
std::ofstream myfile2; 
myfile2.open("maxi.txt");



// Compute the number of data points
// max angle and min angle of the laser scanner divide by the increment angle of each data point
float rangeDataNum = 1 + (laserScanData->angle_max - laserScanData->angle_min)  / (laserScanData->angle_increment);

 
//move forward
velocityCommand.linear.x = 0.0;
velocityCommand.angular.z = 0.0;
//	ROS_INFO("Angle Max : [%f]" , laserScanData->angle_max );
//	ROS_INFO("Angle Min : [%f]" , laserScanData->angle_min );
        ROS_INFO("Angle Max - Degrees : [%f]" , (180/3.1415)*laserScanData->angle_max );
//        ROS_INFO("Angle Min- Degreees : [%f]" , (180/3.1415)*laserScanData->angle_min );

//	ROS_INFO("Range:[%f]" , rangeDataNum );
//	ROS_INFO("Angle Inc : [%f]" ,(180/3.1415)*laserScanData->angle_increment);


	for(int i = 0; i < 512; i++){

	//Store location in array 
	locationValues[i]=laserScanData->ranges[i];
		
	if((i%50)==0) {
	//ROS_INFO("range[%d] : [%f]" , i , laserScanData->ranges[i]);
		}
	}
	
	for(int j=0; j<512; j++){
	locationData.push_back(locationValues[j]);
        myfile <<  ( "[%f] ", locationValues[j]) << ( ", " ) ;

	}
	

	//Min-Max
	//Run persistence on data - this is the main call.
	 Persistence1D p;
	 p.RunPersistence(locationData);

   	 //Get all extrema with a persistence larger than 10.
	 vector< TPairedExtrema > Extrema;
   	 p.GetPairedExtrema(Extrema, 1);



	    //Print all found pairs - pairs are sorted ascending wrt. persistence.
    for(vector< TPairedExtrema >::iterator it = Extrema.begin(); it != Extrema.end(); it++)
    {
        myfile2  << "Persistence: " << (*it).Persistence 
             << " minimum index: " << (*it).MinIndex 
             << " maximum index: " << (*it).MaxIndex 
             << std::endl;
    }

    //Also, print the global minimum.
    myfile2 << "Global minimum index: " << p.GetGlobalMinimumIndex()
         << " Global minimum value: " << p.GetGlobalMinimumValue() <<  endl;

	p.PrintResults(10);


	myfile << " ]"; 
	myfile.close();
	myfile2.close(); 
}



/*Function that finds Maxima*/
/*
The odometer call back function
http://docs.ros.org/api/nav_msgs/html/msg/Odometry.html
*/
void chatterCallback(const nav_msgs::Odometry::ConstPtr& msg)
{
	//Print the odom data structure
	//Message sequence
	ROS_INFO("Seq: [%d]", msg->header.seq);
	//Position
	ROS_INFO("Position-> x: [%f], y: [%f], z: [%f]", msg->pose.pose.position.x,msg->pose.pose.position.y, msg->pose.pose.position.z);
	//Orientation
	ROS_INFO("Orientation-> x: [%f], y: [%f], z: [%f], w: [%f]", msg->pose.pose.orientation.x, msg->pose.pose.orientation.y, msg->pose.pose.orientation.z, msg->pose.pose.orientation.w);
	//Velocity
	ROS_INFO("Vel-> Linear: [%f], Angular: [%f]", msg->twist.twist.linear.x,msg->twist.twist.angular.z);
		
}

int main (int argc, char **argv)
{	
	ros::init(argc, argv, "pioneer_laser_node");	// command line ROS arguments
	ros::NodeHandle my_handle;	// ROS comms access point

	ros::Publisher vel_pub_object = my_handle.advertise<geometry_msgs::Twist>("/RosAria/cmd_vel",1);

	/*
	subscribe to the scan topic and define a callback function to process the data
	the call back function is called each time a new data is received from the topic
	*/
	ros::Subscriber laser_sub_object = my_handle.subscribe("/scan", 1, laserScanCallback);

	
	ros::Rate loop_rate(10);// loop 10 Hz

	for (int j = 0; j < 10 ; ++j) 
	{
		ros::spinOnce();
		loop_rate.sleep();

		// publish to the twist to the topic
		vel_pub_object.publish(velocityCommand);
	}

	
	return 0;
}
